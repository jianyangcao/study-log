Command and Description
--help: list the possible options that the command accepts, provide a brief description and example of how to use it.
man: provide the command we want to read the documentation(man ls)
echo: Output any text that we provide(when we want to echo a string, need to use "")
whoami: Find out what user we're currently logged in as
ls(listing):  Listing Files in Our Current Directory
  ls folder*: if there are some directories named folder1 folder2...
  ls -R folder(recursive listing): showing subfolders and their files too
  ls -a(--all): output with a few more files and folders 
  ls -l: Shows detailed info: permissions, number of links, owner, group, file size (in bytes), modification date, and filename.
  ls -h: human readable words
cd(change directory): Changing Our Current Directory
cat(concentrate): Outputting the Contents of a File
pwd(print working directory): Finding out the full Path to our Current Working Directory
find: using a set of commands to quickly search for files across the entire system that our user has access to
  find -name password.txt
    find -name *.txt: find every .txt file that's in our current directory.
grep: search the contents of files for specific values that we are looking for.
  grep "81.143.211.90" access.log: find any entries with the IP address of "81.143.211.90" in "access.log"
wc: count the number of entries
&:	This operator allows you to run commands in the background of your terminal.
&&:	This operator allows you to combine multiple commands together in one line of your terminal.
>: This operator is a redirector - meaning that we can take the output from a command (such as using cat to output a file) and direct it elsewhere.
  echo hi > welcome (If the file i.e. "welcome" already exists, the contents will be overwritten)
>> :This operator does the same function of the > operator but appends the output rather than replacing (meaning nothing is overwritten).
ssh: log in to the remote machine using SSH
  ssh username@ip address: ssh tryhackme@10.201.40.207
touch: create file
mkdir(make directory): create a folder
cp(copy): copy a file or folder
  cp file1 file2: copy file1 to file2
mv(move): move a file or folder  
  Not only can you use mv to move a file to a new folder, but you can also use mv to rename a file or folder: mv file1 file2 change the name of file1 to file2
rm(remove): remove a file or folder
  rm -R: switch alongside the name of the directory you wish to remove
file: determine the type of file
su: switch between users

